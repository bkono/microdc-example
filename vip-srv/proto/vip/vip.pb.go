// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vip.proto

/*
Package go_micro_srv_vip is a generated protocol buffer package.

It is generated from these files:
	vip.proto

It has these top-level messages:
	CheckNameRequest
	CheckNameResponse
*/
package go_micro_srv_vip

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CheckNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CheckNameRequest) Reset()                    { *m = CheckNameRequest{} }
func (m *CheckNameRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckNameRequest) ProtoMessage()               {}
func (*CheckNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CheckNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CheckNameResponse struct {
	IsVip bool `protobuf:"varint,1,opt,name=is_vip,json=isVip" json:"is_vip,omitempty"`
}

func (m *CheckNameResponse) Reset()                    { *m = CheckNameResponse{} }
func (m *CheckNameResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckNameResponse) ProtoMessage()               {}
func (*CheckNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CheckNameResponse) GetIsVip() bool {
	if m != nil {
		return m.IsVip
	}
	return false
}

func init() {
	proto.RegisterType((*CheckNameRequest)(nil), "go.micro.srv.vip.CheckNameRequest")
	proto.RegisterType((*CheckNameResponse)(nil), "go.micro.srv.vip.CheckNameResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for VIP service

type VIPClient interface {
	CheckName(ctx context.Context, in *CheckNameRequest, opts ...client.CallOption) (*CheckNameResponse, error)
}

type vIPClient struct {
	c           client.Client
	serviceName string
}

func NewVIPClient(serviceName string, c client.Client) VIPClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.vip"
	}
	return &vIPClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *vIPClient) CheckName(ctx context.Context, in *CheckNameRequest, opts ...client.CallOption) (*CheckNameResponse, error) {
	req := c.c.NewRequest(c.serviceName, "VIP.CheckName", in)
	out := new(CheckNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VIP service

type VIPHandler interface {
	CheckName(context.Context, *CheckNameRequest, *CheckNameResponse) error
}

func RegisterVIPHandler(s server.Server, hdlr VIPHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&VIP{hdlr}, opts...))
}

type VIP struct {
	VIPHandler
}

func (h *VIP) CheckName(ctx context.Context, in *CheckNameRequest, out *CheckNameResponse) error {
	return h.VIPHandler.CheckName(ctx, in, out)
}

func init() { proto.RegisterFile("vip.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xcb, 0x2c, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x48, 0xcf, 0xd7, 0xcb, 0xcd, 0x4c, 0x2e, 0xca, 0xd7,
	0x2b, 0x2e, 0x2a, 0xd3, 0x2b, 0xcb, 0x2c, 0x50, 0x52, 0xe3, 0x12, 0x70, 0xce, 0x48, 0x4d, 0xce,
	0xf6, 0x4b, 0xcc, 0x4d, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9,
	0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xb4, 0xb8, 0x04,
	0x91, 0xd4, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89, 0x72, 0xb1, 0x65, 0x16, 0xc7, 0x97,
	0x65, 0x16, 0x80, 0x95, 0x72, 0x04, 0xb1, 0x66, 0x16, 0x87, 0x65, 0x16, 0x18, 0xc5, 0x72, 0x31,
	0x87, 0x79, 0x06, 0x08, 0x85, 0x71, 0x71, 0xc2, 0xb5, 0x08, 0x29, 0xe9, 0xa1, 0x5b, 0xad, 0x87,
	0x6e, 0xaf, 0x94, 0x32, 0x5e, 0x35, 0x10, 0x3b, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x7e, 0x31, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x78, 0x56, 0x75, 0xd8, 0x00, 0x00, 0x00,
}
